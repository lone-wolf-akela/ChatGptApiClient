
#nullable enable

namespace Gemini
{
    /// <summary>
    /// A datatype containing media that is part of a multi-part `Content` message.<br/>
    /// A `Part` consists of data which has an associated datatype. A `Part` can only<br/>
    /// contain one of the accepted types in `Part.data`.<br/>
    /// A `Part` must have a fixed IANA MIME type identifying the type and subtype<br/>
    /// of the media if the `inline_data` field is filled with raw bytes.
    /// </summary>
    public sealed partial class Part
    {
        /// <summary>
        /// Inline text.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("text")]
        public string? Text { get; set; }

        /// <summary>
        /// Inline media bytes.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("inlineData")]
        public global::Gemini.Blob? InlineData { get; set; }

        /// <summary>
        /// A predicted `FunctionCall` returned from the model that contains<br/>
        /// a string representing the `FunctionDeclaration.name` with the<br/>
        /// arguments and their values.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("functionCall")]
        public global::Gemini.FunctionCall? FunctionCall { get; set; }

        /// <summary>
        /// The result output of a `FunctionCall` that contains a string<br/>
        /// representing the `FunctionDeclaration.name` and a structured JSON<br/>
        /// object containing any output from the function is used as context to<br/>
        /// the model.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("functionResponse")]
        public global::Gemini.FunctionResponse? FunctionResponse { get; set; }

        /// <summary>
        /// URI based data.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("fileData")]
        public global::Gemini.FileData? FileData { get; set; }

        /// <summary>
        /// Code generated by the model that is meant to be executed.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("executableCode")]
        public global::Gemini.ExecutableCode? ExecutableCode { get; set; }

        /// <summary>
        /// Result of executing the `ExecutableCode`.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("codeExecutionResult")]
        public global::Gemini.CodeExecutionResult? CodeExecutionResult { get; set; }

        /// <summary>
        /// Optional. Video metadata. The metadata should only be specified while the video<br/>
        /// data is presented in inline_data or file_data.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("videoMetadata")]
        public global::Gemini.VideoMetadata? VideoMetadata { get; set; }

        /// <summary>
        /// Optional. Indicates if the part is thought from the model.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("thought")]
        public bool? Thought { get; set; }

        /// <summary>
        /// Optional. An opaque signature for the thought so it can be reused in subsequent<br/>
        /// requests.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("thoughtSignature")]
        public byte[]? ThoughtSignature { get; set; }

        /// <summary>
        /// Additional properties that are not explicitly defined in the schema
        /// </summary>
        [global::System.Text.Json.Serialization.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties { get; set; } = new global::System.Collections.Generic.Dictionary<string, object>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Part" /> class.
        /// </summary>
        /// <param name="text">
        /// Inline text.
        /// </param>
        /// <param name="inlineData">
        /// Inline media bytes.
        /// </param>
        /// <param name="functionCall">
        /// A predicted `FunctionCall` returned from the model that contains<br/>
        /// a string representing the `FunctionDeclaration.name` with the<br/>
        /// arguments and their values.
        /// </param>
        /// <param name="functionResponse">
        /// The result output of a `FunctionCall` that contains a string<br/>
        /// representing the `FunctionDeclaration.name` and a structured JSON<br/>
        /// object containing any output from the function is used as context to<br/>
        /// the model.
        /// </param>
        /// <param name="fileData">
        /// URI based data.
        /// </param>
        /// <param name="executableCode">
        /// Code generated by the model that is meant to be executed.
        /// </param>
        /// <param name="codeExecutionResult">
        /// Result of executing the `ExecutableCode`.
        /// </param>
        /// <param name="videoMetadata">
        /// Optional. Video metadata. The metadata should only be specified while the video<br/>
        /// data is presented in inline_data or file_data.
        /// </param>
        /// <param name="thought">
        /// Optional. Indicates if the part is thought from the model.
        /// </param>
        /// <param name="thoughtSignature">
        /// Optional. An opaque signature for the thought so it can be reused in subsequent<br/>
        /// requests.
        /// </param>
#if NET7_0_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public Part(
            string? text,
            global::Gemini.Blob? inlineData,
            global::Gemini.FunctionCall? functionCall,
            global::Gemini.FunctionResponse? functionResponse,
            global::Gemini.FileData? fileData,
            global::Gemini.ExecutableCode? executableCode,
            global::Gemini.CodeExecutionResult? codeExecutionResult,
            global::Gemini.VideoMetadata? videoMetadata,
            bool? thought,
            byte[]? thoughtSignature)
        {
            this.Text = text;
            this.InlineData = inlineData;
            this.FunctionCall = functionCall;
            this.FunctionResponse = functionResponse;
            this.FileData = fileData;
            this.ExecutableCode = executableCode;
            this.CodeExecutionResult = codeExecutionResult;
            this.VideoMetadata = videoMetadata;
            this.Thought = thought;
            this.ThoughtSignature = thoughtSignature;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Part" /> class.
        /// </summary>
        public Part()
        {
        }
    }
}